#+TITLE: Emacs Configuration
#+PROPERTY: header-args :results silent :tangle yes

* How this works

- this file is linked in ~../emacs.nix~ as config, and gets
  scanned by nix for ~use-package~ macros. Nix then installs
  the dependencies during rebuild (I think)
- home-manager takes the files in this folder (as of now, ~config.org~ and ~init.el~)
  and copies them write-only into the store, then symlinks them into ~~/.config/emacs~
  - write-only forces me to update the files in the nix config and thus keeps it updated
  - somehow it gets the timestamp set to 0. This is relevant as ~org-babel-load-file~ only
    tangles if the timestamp of the ~.org~ file is newer than the ~.el~ file. To force retangling,
    we have to delete ~config.el~ before loading ~config.org~.
- on startup, emacs tangles codeblocks from here into ~config.el~, then loads the resulting file
  - this means the tangled config is always up to date with the nix config
  - probably pretty bad for startup time, depending on how the tangle works
    - in theory only have to tangle once per rebuild
    - the tangled file does not get touched after (timestamp), just a question of
      how emacs decides it does not need to touch the file
      
* TODO code evaluation in orgmode
** c++
* TODO keys for orgmode
* TODO early-init.el
* Other configs

https://github.com/winny-/emacs.d

** M-EMACS

https://github.com/MatthewZMD/.emacs.d

* Package setup
** TODO package

TODO: Do we alwyas have to update package-archive-contents?

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))

  ;; (unless package-archive-contents
  ;;   (package-refresh-contents))
#+end_src

** use-package

#+begin_src emacs-lisp
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src


* Behaviour

** custom variables

Write custom variables into seperate file (so we don't touch init.el).

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))
#+end_src

** Confirm kill

#+begin_src emacs-lisp
  (setq confirm-kill-emacs 'y-or-n-p)
#+end_src

** Lock files

Lock files are symlinks starting with ~.#~, preventing data loss if multiple
users save the same file.

#+begin_src emacs-lisp
  (setq create-lockfiles nil)
#+end_src

** Autosave

Auto-save to the currently visited file.

#+begin_src emacs-lisp
  (auto-save-visited-mode 1)
#+end_src

Write auto-save-files _also_ to ~/tmp~.

#+begin_src emacs-lisp
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))
#+end_src

** Backup

Write backups to ~/tmp~.

#+begin_src emacs-lisp
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
#+end_src

* Completion
** ivy

Add keybindings to allow vim-like movement in completion lists.

#+begin_src emacs-lisp
  (use-package ivy
    :diminish  ;; don't show in modeline
    :bind
    (("C-s" . swiper)
     :map ivy-minibuffer-map
     ("TAB" . ivy-alt-done)
     ("C-l" . ivy-alt-done)
     ("C-j" . ivy-next-line)
     ("C-k" . ivy-previous-line)
     :map ivy-switch-buffer-map
     ("C-k" . ivy-previous-line)
     ("C-l" . ivy-done)
     ("C-d" . ivy-switch-buffer-kill)
     :map ivy-reverse-i-search-map
     ("C-k" . ivy-previous-line)
     ("C-d" . ivy-switch-buffer-kill))
    :init
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src

** counsel

#+begin_src emacs-lisp
  (use-package counsel
    :bind
    (("M-x" . counsel-M-x)
     ("C-x b" . counsel-ibuffer)
     ("C-x C-f" . counsel-find-file)
     :map minibuffer-local-map
     ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** company

~smarter-tab-to-complete~ is from some other config, not sure what
the reason for it is.

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :hook ((prog-mode LaTeX-mode latex-mode ess-r-mode) . company-mode)
    :bind
    ;; (:map company-active-map
    ;; ([tab] . smarter-tab-to-complete)
    ;; ("TAB" . smarter-tab-to-complete))
    :custom
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t)
    (company-require-match 'never)
    ;; Don't use company in the following modes
    (company-global-modes '(not shell-mode eaf-mode))
    ;; Trigger completion after a bit
    (company-idle-delay 0.3)
    ;; Number the candidates (use M-1, M-2 etc to select completions).
    (company-show-numbers t)
    :config
    ;; (unless clangd-p (delete 'company-clang company-backends))
    (global-company-mode 1)
    ;; (defun smarter-tab-to-complete ()
    ;;   ;; "Try to `org-cycle', `yas-expand', and `yas-next-field' at current cursor position.
    ;;   ;;  
    ;;   ;;     If all failed, try to complete the common part with `company-complete-common'"
    ;;   (interactive)
    ;;   (when yas-minor-mode
    ;;     (let ((old-point (point))
    ;; 	    (old-tick (buffer-chars-modified-tick))
    ;; 	    (func-list
    ;; 	     (if (equal major-mode 'org-mode) '(org-cycle yas-expand yas-next-field)
    ;; 	       '(yas-expand yas-next-field))))
    ;; 	(catch 'func-suceed
    ;; 	  (dolist (func func-list)
    ;; 	    (ignore-errors (call-interactively func))
    ;; 	    (unless (and (eq old-point (point))
    ;; 			 (eq old-tick (buffer-chars-modified-tick)))
    ;; 	      (throw 'func-suceed t)))
    ;; 	  (company-complete-common))))))
)
#+end_src

** TODO yasnippet

#+begin_src emacs-lisp :tangle no
  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (use-package yasnippet-snippets :after yasnippet)
    :hook
    ((prog-mode LaTeX-mode org-mode markdown-mode) . yas-minor-mode)
    :bind
    (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
    (:map yas-keymap
	  (("TAB" . smarter-yas-expand-next-field)
	   ([(tab)] . smarter-yas-expand-next-field)))
    :config
    (yas-reload-all)
    (defun smarter-yas-expand-next-field ()
      ;;  "Try to `yas-expand' then `yas-next-field' at current cursor position."
      (interactive)
      (let ((old-point (point))
	    (old-tick (buffer-chars-modified-tick)))
	(yas-expand)
	(when (and (eq old-point (point))
		   (eq old-tick (buffer-chars-modified-tick)))
	  (ignore-errors (yas-next-field))))))
#+end_src

* Visual changes
** Correct defaults

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
#+end_src

#+begin_src emacs-lisp
  (set-fringe-mode 10)
#+end_src

** Visual bell

#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

** Line numbers
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (dolist (mode '(org-mode-hook
		  vterm-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code" :height 120)
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (setq
     doom-themes-enable-bold t
     doom-themes-enable-italic t)
    (load-theme 'doom-palenight t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src

*** Cool themes

#+begin_src emacs-lisp :tangle no
  (load-theme 'doom-tomorrow-night t)
#+end_src

** Modeline

#+begin_src emacs-lisp
  (use-package all-the-icons)

  (use-package doom-modeline
    :config
    (doom-modeline-mode 1))
#+end_src

** Rainbow delimiter

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
    (prog-mode . rainbow-delimiters-mode))
#+end_src

** hl-todo

From doom-emacs

#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (prog-mode . hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":"
          hl-todo-keyword-faces
          `(("TODO"       warning bold)
            ("FIXME"      error bold)
            ("HACK"       font-lock-constant-face bold)
            ("REVIEW"     font-lock-keyword-face bold)
            ("NOTE"       success bold)
            ("DEPRECATED" font-lock-doc-face bold))))
#+end_src


** pretty-mode

- did not get it to work reliably
- resulting symbols are not monospace, stuff doesn't align anymore

#+begin_src emacs-lisp :tangle no
  (use-package pretty-mode
    :config
    (global-pretty-mode 1))
#+end_src

* Ergonomics
** which-key

#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :init
    (which-key-mode)
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

** helpful

#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* Keybindings
** evil

#+begin_src emacs-lisp
  ;; escape to escape
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

TODO: rune/evil-hook?

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    ;; :hook
    ;; (evil-mode . rune/evil-hook)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use viual line motions outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
#+end_src

** TODO hydra

short keybindings in limited contexts

** general

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer spc-leader
      :states '(normal visual insert emacs)
      :keymaps 'override
      :prefix "SPC"
      :non-normal-prefix "C-SPC")
    (spc-leader
      "w" 'evil-window-map
      "h" 'help-command

      "." 'counsel-find-file
      "," 'counsel-ibuffer

      "SPC" 'projectile-command-map

      "gg" 'magit

      "cc" 'compile
      "cs" 'eglot
      "cf" 'eglot-format-buffer
      "cr" 'eglot-rename
      "cm" 'imenu
      "cd" 'xref-find-definitions
      "cD" 'xref-find-references

      "ni"  'org-insert-structure-template
      "nrf" 'org-roam-node-find
      "nri" 'org-roam-node-insert
      ))
#+end_src

*** Examples

- https://github.com/tshu-w/.emacs.d/blob/master/lisp/core-keybinds.el
- https://github.com/skyler544/rex/blob/main/config/rex-keybinds.el

* Projects
** projectile

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config
    (projectile-mode)
    :custom
    ((projectile-completion-system 'ivy))
    :init
    ;; (when (file-directory-p "~/root-for-all-code")
    ;;   (setq projectile-project-search-path '("~/root-for-all-code")))
    (setq projectile-switch-project-action #'projectile-dired))
#+end_src

#+begin_src emacs-lisp
  (use-package counsel-projectile
    :config
    (counsel-projectile-mode))
#+end_src

* Version control
** magit

#+begin_src emacs-lisp
  (use-package magit
    :commands
    (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

* Programming

** treesitter
from https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
#+begin_src emacs-lisp
  ;; :mode (("\\.tsx\\'" . tsx-ts-mode))
  (defun mp-setup-install-grammars ()
    (interactive)
    (dolist (grammar
	      '((css . ("https://github.com/tree-sitter/tree-sitter-css" "v0.20.0"))
		(html . ("https://github.com/tree-sitter/tree-sitter-html" "v0.20.1"))
		(javascript . ("https://github.com/tree-sitter/tree-sitter-javascript" "v0.20.1" "src"))
		(json . ("https://github.com/tree-sitter/tree-sitter-json" "v0.20.2"))
		(python . ("https://github.com/tree-sitter/tree-sitter-python" "v0.20.4"))
		(toml "https://github.com/tree-sitter/tree-sitter-toml")
		(tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "tsx/src"))
		(typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "v0.20.3" "typescript/src"))
		(yaml . ("https://github.com/ikatyang/tree-sitter-yaml" "v0.5.0"))))
      (add-to-list 'treesit-language-source-alist grammar)
      (unless (treesit-language-available-p (car grammar))  ;; this prevents automatic updates
	(treesit-install-language-grammar (car grammar)))))

  (dolist (mapping
	 '((python-mode . python-ts-mode)
	   (css-mode . css-ts-mode)
	   (typescript-mode . typescript-ts-mode)
	   (js2-mode . js-ts-mode)
	   (bash-mode . bash-ts-mode)
	   (css-mode . css-ts-mode)
	   (json-mode . json-ts-mode)
	   (js-json-mode . json-ts-mode)))
    (add-to-list 'major-mode-remap-alist mapping))
#+end_src

** direnv

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+end_src

** eglot

#+begin_src emacs-lisp
  (use-package eglot
    :defer t
    :config
    (add-to-list 'eglot-server-programs `(csharp-mode . ("OmniSharp" "-lsp")))
    :hook
    ((python-ts-mode haskell-mode csharp-mode) . eglot-ensure))
#+end_src

** flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :init (global-flycheck-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package flycheck-eglot
    :after (flycheck eglot)
    :config
    (global-flycheck-eglot-mode 1))
#+end_src

** web

#+begin_src emacs-lisp
  (use-package multi-web-mode
    :config
    (setq mweb-default-major-mode 'html-mode)
    (setq mweb-tags
	  '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
	    (js-mode  "<script[^>]*>" "</script>")
	    (css-mode "<style[^>]*>" "</style>")))
    (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
    (multi-web-global-mode 1))
#+end_src

** typescript

TODO: github.com/AdamNiederer/ng2-mode

#+begin_src emacs-lisp
  (use-package typescript-mode)

  (use-package tide
  :after (company flycheck direnv editorconfig)
  :hook
  ((typescript-ts-mode . tide-setup)
   (tsx-ts-mode . tide-setup)
   ;; tide seems to only honor tsfmt.json. See also github.com/ananthakumaran/tide/issues/96
   (before-save . tide-format-before-save)
   (typescript-ts-mode . tide-hl-identifier-mode)))
#+end_src

** C#

TODO: check out these https://github.com/winny-/emacs.d/blob/master/configuration.org#c-net-support

#+begin_src emacs-lisp
  (use-package csharp-mode)
#+end_src

*** lsp
Make sure that omnisharp is installed, e.g. default.nix:

#+begin_src nix :tangle no
{ pkgs ? import <nixpkgs> {}}:

pkgs.mkShell {
  packages = with pkgs; [
    dotnetCorePackages.sdk_8_0
    omnisharp-roslyn
  ];
}
#+end_src

and that eglot knows about it, e.g.

#+begin_src emacs-lisp :tangle no
   (add-to-list 'eglot-server-programs `(csharp-mode . ("OmniSharp" "-lsp")))
#+end_src


** python

#+begin_src emacs-lisp
  (use-package python
    :config
    (setq python-ident-guess-offset-verbos nil))
#+end_src

#+begin_src emacs-lisp
  (use-package blacken
    :defer t
    :hook
    (python-ts-mode . blacken-mode))
#+end_src

** nix

#+begin_src emacs-lisp
  (use-package nix-mode
    :mode
    ("\\.nix\\'"))
#+end_src

** haskell

#+begin_src emacs-lisp
  (use-package haskell-mode
    :mode
    ("\\.hs\\'")
    :bind
    (:map haskell-mode-map ("C-c C-c" . haskell-interactive-switch)))
#+end_src

* org

blocks: ~<sTAB~ does not work anymore, restore it by ~(require 'org-tempo)~.
The function is ~org-insert-structure-template~.

#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :defer t
    :custom
    (org-confirm-babel-evaluate 'nil)
    (org-todo-keywords
     '((sequence "TODO" "IN-PROGRESS" "REVIEW" "|" "DONE" "CANCELED")))
    :config
    (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       ;; other Babel languages
       (C . t)
       (python . t)
       (plantuml . t)
       (haskell . t)))
    )
#+end_src

** org-modern

#+begin_src emacs-lisp
  (use-package org-modern
    :hook
    ((org-mode org-agenda-finalize-mode) . org-modern-mode))
#+end_src

** org-roam

#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/org/roam"))
    :config
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode))
#+end_src
